{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from catboost.datasets import amazon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train, test = amazon()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((32769, 10), (58921, 10))"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape, test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ACTION</th>\n",
       "      <th>RESOURCE</th>\n",
       "      <th>MGR_ID</th>\n",
       "      <th>ROLE_ROLLUP_1</th>\n",
       "      <th>ROLE_ROLLUP_2</th>\n",
       "      <th>ROLE_DEPTNAME</th>\n",
       "      <th>ROLE_TITLE</th>\n",
       "      <th>ROLE_FAMILY_DESC</th>\n",
       "      <th>ROLE_FAMILY</th>\n",
       "      <th>ROLE_CODE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>39353</td>\n",
       "      <td>85475</td>\n",
       "      <td>117961</td>\n",
       "      <td>118300</td>\n",
       "      <td>123472</td>\n",
       "      <td>117905</td>\n",
       "      <td>117906</td>\n",
       "      <td>290919</td>\n",
       "      <td>117908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>17183</td>\n",
       "      <td>1540</td>\n",
       "      <td>117961</td>\n",
       "      <td>118343</td>\n",
       "      <td>123125</td>\n",
       "      <td>118536</td>\n",
       "      <td>118536</td>\n",
       "      <td>308574</td>\n",
       "      <td>118539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>36724</td>\n",
       "      <td>14457</td>\n",
       "      <td>118219</td>\n",
       "      <td>118220</td>\n",
       "      <td>117884</td>\n",
       "      <td>117879</td>\n",
       "      <td>267952</td>\n",
       "      <td>19721</td>\n",
       "      <td>117880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>36135</td>\n",
       "      <td>5396</td>\n",
       "      <td>117961</td>\n",
       "      <td>118343</td>\n",
       "      <td>119993</td>\n",
       "      <td>118321</td>\n",
       "      <td>240983</td>\n",
       "      <td>290919</td>\n",
       "      <td>118322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>42680</td>\n",
       "      <td>5905</td>\n",
       "      <td>117929</td>\n",
       "      <td>117930</td>\n",
       "      <td>119569</td>\n",
       "      <td>119323</td>\n",
       "      <td>123932</td>\n",
       "      <td>19793</td>\n",
       "      <td>119325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ACTION  RESOURCE  MGR_ID  ROLE_ROLLUP_1  ROLE_ROLLUP_2  ROLE_DEPTNAME  \\\n",
       "0       1     39353   85475         117961         118300         123472   \n",
       "1       1     17183    1540         117961         118343         123125   \n",
       "2       1     36724   14457         118219         118220         117884   \n",
       "3       1     36135    5396         117961         118343         119993   \n",
       "4       1     42680    5905         117929         117930         119569   \n",
       "\n",
       "   ROLE_TITLE  ROLE_FAMILY_DESC  ROLE_FAMILY  ROLE_CODE  \n",
       "0      117905            117906       290919     117908  \n",
       "1      118536            118536       308574     118539  \n",
       "2      117879            267952        19721     117880  \n",
       "3      118321            240983       290919     118322  \n",
       "4      119323            123932        19793     119325  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "col4train = [x for x in train.columns if x not in ['ACTION', 'ROLE_TITLE']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['RESOURCE',\n",
       " 'MGR_ID',\n",
       " 'ROLE_ROLLUP_1',\n",
       " 'ROLE_ROLLUP_2',\n",
       " 'ROLE_DEPTNAME',\n",
       " 'ROLE_FAMILY_DESC',\n",
       " 'ROLE_FAMILY',\n",
       " 'ROLE_CODE']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "col4train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train[col4train]\n",
    "y = train['ACTION'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 1, 1, 1])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.model_selection import StratifiedKFold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_model(): \n",
    "    params = {\n",
    "        \"n_estimators\":300, \n",
    "        \"n_jobs\": 3,\n",
    "        \"random_state\":5436,\n",
    "    }\n",
    "    return ExtraTreesClassifier(**params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def validate_model(model, data):\n",
    "    skf = StratifiedKFold(n_splits=5, random_state = 4141, shuffle = True)\n",
    "    stats = cross_validate(\n",
    "        model, data[0], data[1], \n",
    "        groups=None, scoring='roc_auc', \n",
    "        cv=skf, n_jobs=None, return_train_score = True\n",
    "    )\n",
    "    stats = pd.DataFrame(stats)\n",
    "    return stats.describe().transpose()\n",
    "\n",
    "# transforms given train and test datasets using provided function, \n",
    "# function parameters can be passed as a dict\n",
    "def transform_dataset(train, test, func, func_params = {}):\n",
    "    dataset = pd.concat([train, test], ignore_index = True)\n",
    "    dataset = func(dataset, **func_params)\n",
    "    if isinstance(dataset, pd.DataFrame):\n",
    "        new_train = dataset.iloc[:train.shape[0],:].reset_index(drop = True)\n",
    "        new_test =  dataset.iloc[train.shape[0]:,:].reset_index(drop = True)\n",
    "    else:\n",
    "        new_train = dataset[:train.shape[0]]\n",
    "        new_test =  dataset[train.shape[0]:]\n",
    "    return new_train, new_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Label encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "MJTCP = 32292 #Michael Jordan total career points\n",
    "#for each column in dataset creates N column with random integers\n",
    "def assign_rnd_integer(dataset, number_of_times = 5, seed = MJTCP):\n",
    "    new_dataset = pd.DataFrame()\n",
    "    np.random.seed(seed)\n",
    "    for c in dataset.columns:\n",
    "        for i in range(number_of_times):\n",
    "            col_name = c+\"_\"+str(i)\n",
    "            unique_vals = dataset[c].unique()\n",
    "            labels = np.array(list(range(len(unique_vals))))\n",
    "            np.random.shuffle(labels)\n",
    "            mapping = pd.DataFrame({c: unique_vals, col_name: labels})\n",
    "            new_dataset[col_name] = (dataset[[c]]\n",
    "                                     .merge(mapping, on = c, how = 'left')[col_name]\n",
    "                                    ).values\n",
    "    return new_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32769, 40) (58921, 40)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RESOURCE_0</th>\n",
       "      <th>RESOURCE_1</th>\n",
       "      <th>RESOURCE_2</th>\n",
       "      <th>RESOURCE_3</th>\n",
       "      <th>RESOURCE_4</th>\n",
       "      <th>MGR_ID_0</th>\n",
       "      <th>MGR_ID_1</th>\n",
       "      <th>MGR_ID_2</th>\n",
       "      <th>MGR_ID_3</th>\n",
       "      <th>MGR_ID_4</th>\n",
       "      <th>...</th>\n",
       "      <th>ROLE_FAMILY_0</th>\n",
       "      <th>ROLE_FAMILY_1</th>\n",
       "      <th>ROLE_FAMILY_2</th>\n",
       "      <th>ROLE_FAMILY_3</th>\n",
       "      <th>ROLE_FAMILY_4</th>\n",
       "      <th>ROLE_CODE_0</th>\n",
       "      <th>ROLE_CODE_1</th>\n",
       "      <th>ROLE_CODE_2</th>\n",
       "      <th>ROLE_CODE_3</th>\n",
       "      <th>ROLE_CODE_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4389</td>\n",
       "      <td>3561</td>\n",
       "      <td>5237</td>\n",
       "      <td>5701</td>\n",
       "      <td>3584</td>\n",
       "      <td>1064</td>\n",
       "      <td>3615</td>\n",
       "      <td>2251</td>\n",
       "      <td>911</td>\n",
       "      <td>1006</td>\n",
       "      <td>...</td>\n",
       "      <td>60</td>\n",
       "      <td>62</td>\n",
       "      <td>32</td>\n",
       "      <td>59</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>51</td>\n",
       "      <td>262</td>\n",
       "      <td>36</td>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4111</td>\n",
       "      <td>6450</td>\n",
       "      <td>7308</td>\n",
       "      <td>5447</td>\n",
       "      <td>6616</td>\n",
       "      <td>3007</td>\n",
       "      <td>177</td>\n",
       "      <td>4687</td>\n",
       "      <td>1125</td>\n",
       "      <td>336</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>64</td>\n",
       "      <td>352</td>\n",
       "      <td>106</td>\n",
       "      <td>130</td>\n",
       "      <td>327</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4009</td>\n",
       "      <td>2880</td>\n",
       "      <td>2476</td>\n",
       "      <td>1732</td>\n",
       "      <td>6819</td>\n",
       "      <td>4465</td>\n",
       "      <td>2100</td>\n",
       "      <td>4860</td>\n",
       "      <td>3517</td>\n",
       "      <td>4115</td>\n",
       "      <td>...</td>\n",
       "      <td>34</td>\n",
       "      <td>51</td>\n",
       "      <td>50</td>\n",
       "      <td>14</td>\n",
       "      <td>29</td>\n",
       "      <td>277</td>\n",
       "      <td>258</td>\n",
       "      <td>232</td>\n",
       "      <td>326</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3402</td>\n",
       "      <td>4180</td>\n",
       "      <td>1831</td>\n",
       "      <td>1607</td>\n",
       "      <td>2508</td>\n",
       "      <td>798</td>\n",
       "      <td>2017</td>\n",
       "      <td>3961</td>\n",
       "      <td>698</td>\n",
       "      <td>4490</td>\n",
       "      <td>...</td>\n",
       "      <td>60</td>\n",
       "      <td>62</td>\n",
       "      <td>32</td>\n",
       "      <td>59</td>\n",
       "      <td>16</td>\n",
       "      <td>106</td>\n",
       "      <td>187</td>\n",
       "      <td>306</td>\n",
       "      <td>212</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4312</td>\n",
       "      <td>5342</td>\n",
       "      <td>5151</td>\n",
       "      <td>2891</td>\n",
       "      <td>174</td>\n",
       "      <td>4429</td>\n",
       "      <td>1504</td>\n",
       "      <td>791</td>\n",
       "      <td>2071</td>\n",
       "      <td>622</td>\n",
       "      <td>...</td>\n",
       "      <td>64</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>50</td>\n",
       "      <td>25</td>\n",
       "      <td>346</td>\n",
       "      <td>2</td>\n",
       "      <td>134</td>\n",
       "      <td>103</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   RESOURCE_0  RESOURCE_1  RESOURCE_2  RESOURCE_3  RESOURCE_4  MGR_ID_0  \\\n",
       "0        4389        3561        5237        5701        3584      1064   \n",
       "1        4111        6450        7308        5447        6616      3007   \n",
       "2        4009        2880        2476        1732        6819      4465   \n",
       "3        3402        4180        1831        1607        2508       798   \n",
       "4        4312        5342        5151        2891         174      4429   \n",
       "\n",
       "   MGR_ID_1  MGR_ID_2  MGR_ID_3  MGR_ID_4  ...  ROLE_FAMILY_0  ROLE_FAMILY_1  \\\n",
       "0      3615      2251       911      1006  ...             60             62   \n",
       "1       177      4687      1125       336  ...              9             27   \n",
       "2      2100      4860      3517      4115  ...             34             51   \n",
       "3      2017      3961       698      4490  ...             60             62   \n",
       "4      1504       791      2071       622  ...             64              5   \n",
       "\n",
       "   ROLE_FAMILY_2  ROLE_FAMILY_3  ROLE_FAMILY_4  ROLE_CODE_0  ROLE_CODE_1  \\\n",
       "0             32             59             16           10           51   \n",
       "1              0              3             64          352          106   \n",
       "2             50             14             29          277          258   \n",
       "3             32             59             16          106          187   \n",
       "4             15             50             25          346            2   \n",
       "\n",
       "   ROLE_CODE_2  ROLE_CODE_3  ROLE_CODE_4  \n",
       "0          262           36          188  \n",
       "1          130          327           76  \n",
       "2          232          326           45  \n",
       "3          306          212           17  \n",
       "4          134          103           50  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_train, new_test = transform_dataset(\n",
    "    train[col4train], test[col4train], \n",
    "    assign_rnd_integer, {\"number_of_times\":5}\n",
    ")\n",
    "print(new_train.shape, new_test.shape)\n",
    "new_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "\n",
    "#our small helper function, returns ExtraTrees instance\n",
    "def get_model():\n",
    "    params = {\n",
    "        \"n_estimators\":300, \n",
    "        \"n_jobs\": 3,\n",
    "        \"random_state\":5436,\n",
    "    }\n",
    "    return ExtraTreesClassifier(**params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Supervised Encoding\n",
    "### Simple Target encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "class TargetEncoding(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, columns_names ):         # 초기화 메서드\n",
    "        self.columns_names = columns_names\n",
    "        self.learned_values = {}\n",
    "        self.dataset_mean = np.nan\n",
    "    \n",
    "    def fit(self, X, y, **fit_params):\n",
    "        X_ = X.copy()\n",
    "        self.learned_values = {}\n",
    "        X_[\"__target__\"] = y\n",
    "        for c in [x for x in X_.columns if x in self.columns_names]:\n",
    "            self.learned_values[c] = (X_[[c,\"__target__\"]]\n",
    "                                      .groupby(c)[\"__target__\"].mean()\n",
    "                                      .reset_index())\n",
    "        self.dataset_mean = np.mean(y)\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X, **fit_params):\n",
    "        transformed_X = X[self.columns_names].copy()\n",
    "        for c in transformed_X.columns:\n",
    "            transformed_X[c] = (transformed_X[[c]]\n",
    "                                .merge(self.learned_values[c], on = c, how = 'left')\n",
    "                               )[\"__target__\"]\n",
    "        transformed_X = transformed_X.fillna(self.dataset_mean)\n",
    "        return transformed_X\n",
    "    \n",
    "    def fit_transform(self, X, y, **fit_params):\n",
    "        self.fit(X,y)\n",
    "        return self.transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC score: 1.0000 Valid AUC score: 0.9737, STD: 0.0025\n"
     ]
    }
   ],
   "source": [
    "skf = StratifiedKFold(n_splits=5, random_state = 5451, shuffle = True)\n",
    "te = TargetEncoding(columns_names=col4train)\n",
    "X_tr = te.fit_transform(train, y).values\n",
    "\n",
    "scores = []\n",
    "tr_scores = []\n",
    "for train_index, test_index in skf.split(train, y):\n",
    "    train_df, valid_df = X_tr[train_index], X_tr[test_index]\n",
    "    train_y, valid_y = y[train_index], y[test_index]\n",
    "\n",
    "    model = get_model()\n",
    "    model.fit(train_df,train_y)\n",
    "\n",
    "    predictions = model.predict_proba(valid_df)[:,1]\n",
    "    scores.append(roc_auc_score(valid_y, predictions))\n",
    "\n",
    "    train_preds = model.predict_proba(train_df)[:,1]\n",
    "    tr_scores.append(roc_auc_score(train_y, train_preds))\n",
    "\n",
    "print(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n",
    "    np.mean(tr_scores), np.mean(scores), np.std(scores)\n",
    "))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# target 정보가 많이 포함되어있는 예시"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC score: 1.0000 Valid AUC score: 0.7398, STD: 0.0089\n"
     ]
    }
   ],
   "source": [
    "scores = []\n",
    "tr_scores = []\n",
    "for train_index, test_index in skf.split(train, y):\n",
    "    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n",
    "    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n",
    "    train_y, valid_y = y[train_index], y[test_index]\n",
    "    \n",
    "    te = TargetEncoding(columns_names=col4train)\n",
    "    X_tr = te.fit_transform(train_df, train_y).values\n",
    "    X_val = te.transform(valid_df).values\n",
    "\n",
    "    model = get_model()\n",
    "    model.fit(X_tr,train_y)\n",
    "\n",
    "    predictions = model.predict_proba(X_val)[:,1]\n",
    "    scores.append(roc_auc_score(valid_y, predictions))\n",
    "\n",
    "    train_preds = model.predict_proba(X_tr)[:,1]\n",
    "    tr_scores.append(roc_auc_score(train_y, train_preds))\n",
    "\n",
    "print(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n",
    "    np.mean(tr_scores), np.mean(scores), np.std(scores)\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Target encoding smoothing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TargetEncodingSmoothing(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, columns_names,k, f ):\n",
    "        self.columns_names = columns_names\n",
    "        self.learned_values = {}\n",
    "        self.dataset_mean = np.nan\n",
    "        self.k = k #\n",
    "        self.f = f #\n",
    "    def smoothing_func(self, N): #\n",
    "        return 1 / (1 + np.exp(-(N-self.k)/self.f))\n",
    "    def fit(self, X, y, **fit_params):\n",
    "        X_ = X.copy()\n",
    "        self.learned_values = {}\n",
    "        self.dataset_mean = np.mean(y)\n",
    "        X_[\"__target__\"] = y\n",
    "        for c in [x for x in X_.columns if x in self.columns_names]:\n",
    "            stats = (X_[[c,\"__target__\"]]\n",
    "                     .groupby(c)[\"__target__\"].\n",
    "                     agg(['mean', 'size'])) \n",
    "            stats[\"alpha\"] = self.smoothing_func(stats[\"size\"])\n",
    "            stats[\"__target__\"] = (stats[\"alpha\"]*stats[\"mean\"] \n",
    "                                   + (1-stats[\"alpha\"])*self.dataset_mean)\n",
    "            stats = (stats\n",
    "                     .drop([x for x in stats.columns if x not in [\"__target__\",c]], axis = 1)\n",
    "                     .reset_index())\n",
    "            self.learned_values[c] = stats\n",
    "        self.dataset_mean = np.mean(y)\n",
    "        return self\n",
    "    def transform(self, X, **fit_params):\n",
    "        transformed_X = X[self.columns_names].copy()\n",
    "        for c in transformed_X.columns:\n",
    "            transformed_X[c] = (transformed_X[[c]]\n",
    "                                .merge(self.learned_values[c], on = c, how = 'left')\n",
    "                               )[\"__target__\"]\n",
    "        transformed_X = transformed_X.fillna(self.dataset_mean)\n",
    "        return transformed_X\n",
    "    def fit_transform(self, X, y, **fit_params):\n",
    "        self.fit(X,y)\n",
    "        return self.transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2oAAAHSCAYAAACdLTg6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAABv9UlEQVR4nO3dd3hUVeLG8e9NMumkEDoJvXcQARVQRBZUFLuIvfxYu66i4tp1XRtrWXFVRFER7IooWJEmHem9QwIBkgyE9Elmzu+PCRARJIFJ7szk/TzPPFNyM3nDMyTz5px7jmWMQURERERERPxHiN0BRERERERE5I9U1ERERERERPyMipqIiIiIiIifUVETERERERHxMypqIiIiIiIifkZFTURERERExM+E2fWFa9WqZZo0aWLXlxcREREREbHV77//nmmMqX20j9lW1Jo0acLixYvt+vIiIiIiIiK2sixr+7E+pqmPIiIiIiIifkZFTURERERExM+oqImIiIiIiPgZFTURERERERE/o6ImIiIiIiLiZ1TURERERERE/IyKmoiIiIiIiJ9RURMREREREfEzKmoiIiIiIiJ+RkVNRERERETEz6ioiYiIiIiI+BkVNRERERERET+joiYiIiIiIuJnVNRERERERET8zHGLmmVZ71mWtdeyrFXH+LhlWdZ/LcvaZFnWCsuyuvk+poiIiIiISPVRnhG194FBf/Hxc4GWpZfhwJsnH0tERERERKT6CjveAcaYWZZlNfmLQ4YAHxpjDDDfsqwEy7LqG2PSfRVS/JPHY/AYg8eAwWCM93FT5r4pc7wpPeCPj1VZXBERETlRh35hm6M89lePH/ExX3z8L4/90wHH+bBdb0T8+A1QkL45syyLuIQku2NUyHGLWjk0BFLL3E8rfUxFzU9kFxST6sxnf34x+/Jd3kve4dv784spcLkpcntwlXhwlbhxHbrtodhtcB8qZd5i5vYE539iERGpKoZwSginGAclhFOCwyopfawEx6GLmzDLe+2ghDDc3scoIcxyE4aHUNyEHbqU3rfchOIpvZS97SEMNyGlt0Msc/j2oWvvYwevQ/FgYQjBEGodvO3BgkPH/fExg1Xm44evTenl8OOWZY7+OAZKHyv78bK3D/47Hu3xg/e9t8se+8fHDt//4+Mhln7PS3DJJAGe3G53jArxRVGzjvLYUf93W5Y1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/PJQyVm2bNkxj8/MzCQtLY0zzjiDl19+mZdffpkRI0Ywfvx4SkpK2LhxIzNmzCAtLY0+ffqwatUqEhISjvl8NWrU+Muv91e6devG9u3biY2NZerUqVx00UVs3LjxhJ6rrHIVNRERERERCW7lHfmqDPHx8aSkpDBnzhzat2/P+vXrufLKK4967IwZM0hKSiI6OpqLL74YgMsvv5x3330XgOTkZHr16oXD4aBp06a0bt2ajRs3cuqppx7z65/MiFpcXNyh2+eddx633347mZmZh6ZinigVNRERERERsVV4eDiTJk1i4MCBxMbGMmzYsOOOcF1wwQXMmDGDs88+m2nTph0qUxdddBEff/wxN9xwA5mZmWzYsIFmzZr95XOdzIja7t27qVu3LpZlsXDhQjweD0lJSSf0XGWpqImIiIiIiO1iYmL47rvvGDBgADExMQwZMuQvj3/hhRe49tpruffee6lduzbjxo0DYODAgfz000+0a9eO0NBQXnrpJZ8Up//+97+8+OKL7N69m06dOnHeeecxduxYvvjiC958803CwsKIiorik08+wfLBfsiW9/Syqte9e3ezePFiW762iIiIiIjA2rVradu2rd0xqkzZfdSq2tH+rS3L+t0Y0/1ox5dneX4RERERERGpQipqIiIiIiJSLdx77712Ryg3FTUREREREakWVNRERERERCQg2LVmRXVyIv/GKmoiIiIiItVUZGQkWVlZKmuVyBhDVlYWkZGRFfo8Lc8vIiIiIlJNJScnk5aWRkZGht1RglpkZCTJyckV+hwVNRERERGRasrhcNC0aVO7Y8hRaOqjiIiIiIiIn1FRExERERER8TMqaiIiIiIiIn7GsmuFF8uyMoDttnzxv1YLyLQ7hAQ9vc6kKuh1JpVNrzGpCnqdSVWw63XW2BhT+2gfsK2o+SvLshYbY7rbnUOCm15nUhX0OpPKpteYVAW9zqQq+OPrTFMfRURERERE/IyKmoiIiIiIiJ9RUfuzMXYHkGpBrzOpCnqdSWXTa0yqgl5nUhX87nWmc9RERERERET8jEbURERERERE/IyKWhmWZQ2yLGu9ZVmbLMsaaXceCXyWZaVYljXdsqy1lmWttizrntLHa1qW9bNlWRtLrxPtziqBz7KsUMuyllqW9V3pfb3OxKcsy0qwLOsLy7LWlf5cO02vM/Ely7L+Ufr7cpVlWR9blhWp15icLMuy3rMsa69lWavKPHbM15VlWQ+X9oH1lmUNtCe1itohlmWFAm8A5wLtgKssy2pnbyoJAiXA/caYtkAv4I7S19VIYJoxpiUwrfS+yMm6B1hb5r5eZ+JrrwE/GGPaAJ3xvt70OhOfsCyrIXA30N0Y0wEIBYai15icvPeBQUc8dtTXVen7tKFA+9LP+V9pT6hyKmqH9QA2GWO2GGNcwCfAEJszSYAzxqQbY5aU3s7B+6amId7X1gelh30AXGRLQAkalmUlA+cDY8s8rNeZ+IxlWXFAX+BdAGOMyxizH73OxLfCgCjLssKAaGAXeo3JSTLGzAKcRzx8rNfVEOATY0yRMWYrsAlvT6hyKmqHNQRSy9xPK31MxCcsy2oCdAUWAHWNMengLXNAHRujSXB4FXgQ8JR5TK8z8aVmQAYwrnSK7VjLsmLQ60x8xBizExgF7ADSgWxjzE/oNSaV41ivK7/pBCpqh1lHeUxLYopPWJYVC3wJ3GuMOWB3HgkulmUNBvYaY363O4sEtTCgG/CmMaYrkIemoIkPlZ4jNARoCjQAYizLusbeVFIN+U0nUFE7LA1IKXM/Ge9wu8hJsSzLgbekTTDGfFX68B7LsuqXfrw+sNeufBIUzgAutCxrG95p22dblvURep2Jb6UBacaYBaX3v8Bb3PQ6E185B9hqjMkwxhQDXwGno9eYVI5jva78phOoqB22CGhpWVZTy7LC8Z5EONnmTBLgLMuy8J7PsdYY83KZD00Gri+9fT3wTVVnk+BhjHnYGJNsjGmC92fXr8aYa9DrTHzIGLMbSLUsq3XpQ/2BNeh1Jr6zA+hlWVZ06e/P/njP7dZrTCrDsV5Xk4GhlmVFWJbVFGgJLLQhnza8LsuyrPPwnucRCrxnjHnW3kQS6CzL6g3MBlZy+Nyhf+I9T+0zoBHeX0yXG2OOPMlVpMIsyzoLGGGMGWxZVhJ6nYkPWZbVBe+CNeHAFuBGvH/01etMfMKyrKeAK/GumrwUuAWIRa8xOQmWZX0MnAXUAvYATwCTOMbryrKsR4Cb8L4O7zXGfF/1qVXURERERERE/I6mPoqIiIiIiPgZFTURERERERE/o6ImIiIiIiLiZ1TURERERERE/IyKmoiIiIiIiJ9RURMREREREfEzKmoiIiIiIiJ+RkVNRERERETEz/w/9FlA9/REMnwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "x = np.linspace(0,100,100)\n",
    "plot = pd.DataFrame()\n",
    "te = TargetEncodingSmoothing([], 1,1)\n",
    "plot[\"k=1|f=1\"] = te.smoothing_func(x)\n",
    "te = TargetEncodingSmoothing([], 33,5)\n",
    "plot[\"k=33|f=5\"] = te.smoothing_func(x)\n",
    "te = TargetEncodingSmoothing([], 66,15)\n",
    "plot[\"k=66|f=15\"] = te.smoothing_func(x)\n",
    "plot.plot(figsize = (15,8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC score: 1.0000 Valid AUC score: 0.7883, STD: 0.0039\n"
     ]
    }
   ],
   "source": [
    "scores = []\n",
    "tr_scores = []\n",
    "for train_index, test_index in skf.split(train, y):\n",
    "    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n",
    "    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n",
    "    train_y, valid_y = y[train_index], y[test_index]\n",
    "    te = TargetEncodingSmoothing(\n",
    "        columns_names= col4train,\n",
    "        k = 3, f = 1.5\n",
    "    )\n",
    "    X_tr = te.fit_transform(train_df, train_y).values\n",
    "    X_val = te.transform(valid_df).values\n",
    "\n",
    "    model = get_model()\n",
    "    model.fit(X_tr,train_y)\n",
    "\n",
    "    predictions = model.predict_proba(X_val)[:,1]\n",
    "    scores.append(roc_auc_score(valid_y, predictions))\n",
    "\n",
    "    train_preds = model.predict_proba(X_tr)[:,1]\n",
    "    tr_scores.append(roc_auc_score(train_y, train_preds))\n",
    "\n",
    "print(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n",
    "    np.mean(tr_scores), np.mean(scores), np.std(scores)\n",
    "))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_CV_target_encoding(data, y, encoder, cv = 5):\n",
    "    skfTE = StratifiedKFold(n_splits=cv, random_state = 545167, shuffle = True)\n",
    "    result = []\n",
    "    for train_indexTE, test_indexTE in skfTE.split(data, y):\n",
    "        encoder.fit(data.iloc[train_indexTE,:].reset_index(drop = True), y[train_indexTE])\n",
    "        tmp =  encoder.transform(data.iloc[test_indexTE,:].reset_index(drop = True))\n",
    "        tmp[\"index\"] = test_indexTE\n",
    "        result.append(tmp)\n",
    "    result = pd.concat(result, ignore_index = True)\n",
    "    result = result.sort_values('index').reset_index(drop = True).drop('index', axis = 1)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC score: 0.9999 Valid AUC score: 0.8533, STD: 0.0041\n"
     ]
    }
   ],
   "source": [
    "scores = []\n",
    "tr_scores = []\n",
    "for train_index, test_index in skf.split(train, y):\n",
    "    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n",
    "    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n",
    "    train_y, valid_y = y[train_index], y[test_index]\n",
    "    te = TargetEncodingSmoothing(\n",
    "        columns_names= col4train,\n",
    "        k = 3, f = 1.5\n",
    "    )\n",
    "    \n",
    "    X_tr = get_CV_target_encoding(train_df, train_y, te, cv = 5)\n",
    "\n",
    "    te.fit(train_df, train_y)\n",
    "    X_val = te.transform(valid_df).values\n",
    "\n",
    "    model = get_model()\n",
    "    model.fit(X_tr,train_y)\n",
    "\n",
    "    predictions = model.predict_proba(X_val)[:,1]\n",
    "    scores.append(roc_auc_score(valid_y, predictions))\n",
    "\n",
    "    train_preds = model.predict_proba(X_tr)[:,1]\n",
    "    tr_scores.append(roc_auc_score(train_y, train_preds))\n",
    "\n",
    "print(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n",
    "    np.mean(tr_scores), np.mean(scores), np.std(scores)\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding noise. Expanding mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TargetEncodingExpandingMean(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, columns_names):\n",
    "        self.columns_names = columns_names\n",
    "        self.learned_values = {}\n",
    "        self.dataset_mean = np.nan\n",
    "    def fit(self, X, y, **fit_params):\n",
    "        X_ = X.copy()\n",
    "        self.learned_values = {}\n",
    "        self.dataset_mean = np.mean(y)\n",
    "        X_[\"__target__\"] = y\n",
    "        for c in [x for x in X_.columns if x in self.columns_names]:\n",
    "            stats = (X_[[c,\"__target__\"]]\n",
    "                     .groupby(c)[\"__target__\"]\n",
    "                     .agg(['mean', 'size'])) #\n",
    "            stats[\"__target__\"] = stats[\"mean\"]\n",
    "            stats = (stats\n",
    "                     .drop([x for x in stats.columns if x not in [\"__target__\",c]], axis = 1)\n",
    "                     .reset_index())\n",
    "            self.learned_values[c] = stats\n",
    "        return self\n",
    "    def transform(self, X, **fit_params):\n",
    "        transformed_X = X[self.columns_names].copy()\n",
    "        for c in transformed_X.columns:\n",
    "            transformed_X[c] = (transformed_X[[c]]\n",
    "                                .merge(self.learned_values[c], on = c, how = 'left')\n",
    "                               )[\"__target__\"]\n",
    "        transformed_X = transformed_X.fillna(self.dataset_mean)\n",
    "        return transformed_X\n",
    "    \n",
    "    def fit_transform(self, X, y, **fit_params):\n",
    "        self.fit(X,y)\n",
    "    \n",
    "        #Expanding mean transform\n",
    "        X_ = X[self.columns_names].copy().reset_index(drop = True)\n",
    "        X_[\"__target__\"] = y\n",
    "        X_[\"index\"] = X_.index\n",
    "        X_transformed = pd.DataFrame()\n",
    "        for c in self.columns_names:\n",
    "            X_shuffled = X_[[c,\"__target__\", \"index\"]].copy()\n",
    "            X_shuffled = X_shuffled.sample(n = len(X_shuffled),replace=False)\n",
    "            X_shuffled[\"cnt\"] = 1\n",
    "            X_shuffled[\"cumsum\"] = (X_shuffled\n",
    "                                    .groupby(c,sort=False)['__target__']\n",
    "                                    .apply(lambda x : x.shift().cumsum()))\n",
    "            X_shuffled[\"cumcnt\"] = (X_shuffled\n",
    "                                    .groupby(c,sort=False)['cnt']\n",
    "                                    .apply(lambda x : x.shift().cumsum()))\n",
    "            X_shuffled[\"encoded\"] = X_shuffled[\"cumsum\"] / X_shuffled[\"cumcnt\"]\n",
    "            X_shuffled[\"encoded\"] = X_shuffled[\"encoded\"].fillna(self.dataset_mean)\n",
    "            X_transformed[c] = X_shuffled.sort_values(\"index\")[\"encoded\"].values\n",
    "        return X_transformed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC score: 1.0000 Valid AUC score: 0.8355, STD: 0.0079\n"
     ]
    }
   ],
   "source": [
    "scores = []\n",
    "tr_scores = []\n",
    "for train_index, test_index in skf.split(train, y):\n",
    "    train_df = train.loc[train_index,col4train].reset_index(drop = True)\n",
    "    valid_df = train.loc[test_index,col4train].reset_index(drop = True)\n",
    "    train_y, valid_y = y[train_index], y[test_index]\n",
    "    te = TargetEncodingExpandingMean(columns_names=col4train)\n",
    "\n",
    "    X_tr = te.fit_transform(train_df, train_y)\n",
    "    X_val = te.transform(valid_df).values\n",
    "\n",
    "    model = get_model()\n",
    "    model.fit(X_tr,train_y)\n",
    "\n",
    "    predictions = model.predict_proba(X_val)[:,1]\n",
    "    scores.append(roc_auc_score(valid_y, predictions))\n",
    "\n",
    "    train_preds = model.predict_proba(X_tr)[:,1]\n",
    "    tr_scores.append(roc_auc_score(train_y, train_preds))\n",
    "\n",
    "print(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n",
    "    np.mean(tr_scores), np.mean(scores), np.std(scores)\n",
    "))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "train[col4train] = train[col4train].values.astype(str)\n",
    "test[col4train] = test[col4train].values.astype(str)\n",
    "\n",
    "from itertools import combinations\n",
    "new_col4train = col4train\n",
    "for c1,c2 in combinations(col4train, 2):\n",
    "    name = \"{}_{}\".format(c1,c2)\n",
    "    new_col4train.append(name)\n",
    "    train[name] = train[c1] + \"_\" + train[c2]\n",
    "    test[name] = test[c1] + \"_\" + test[c2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32769, 36) (58921, 36)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RESOURCE</th>\n",
       "      <th>MGR_ID</th>\n",
       "      <th>ROLE_ROLLUP_1</th>\n",
       "      <th>ROLE_ROLLUP_2</th>\n",
       "      <th>ROLE_DEPTNAME</th>\n",
       "      <th>ROLE_FAMILY_DESC</th>\n",
       "      <th>ROLE_FAMILY</th>\n",
       "      <th>ROLE_CODE</th>\n",
       "      <th>RESOURCE_MGR_ID</th>\n",
       "      <th>RESOURCE_ROLE_ROLLUP_1</th>\n",
       "      <th>...</th>\n",
       "      <th>ROLE_ROLLUP_2_ROLE_DEPTNAME</th>\n",
       "      <th>ROLE_ROLLUP_2_ROLE_FAMILY_DESC</th>\n",
       "      <th>ROLE_ROLLUP_2_ROLE_FAMILY</th>\n",
       "      <th>ROLE_ROLLUP_2_ROLE_CODE</th>\n",
       "      <th>ROLE_DEPTNAME_ROLE_FAMILY_DESC</th>\n",
       "      <th>ROLE_DEPTNAME_ROLE_FAMILY</th>\n",
       "      <th>ROLE_DEPTNAME_ROLE_CODE</th>\n",
       "      <th>ROLE_FAMILY_DESC_ROLE_FAMILY</th>\n",
       "      <th>ROLE_FAMILY_DESC_ROLE_CODE</th>\n",
       "      <th>ROLE_FAMILY_ROLE_CODE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39353</td>\n",
       "      <td>85475</td>\n",
       "      <td>117961</td>\n",
       "      <td>118300</td>\n",
       "      <td>123472</td>\n",
       "      <td>117906</td>\n",
       "      <td>290919</td>\n",
       "      <td>117908</td>\n",
       "      <td>39353_85475</td>\n",
       "      <td>39353_117961</td>\n",
       "      <td>...</td>\n",
       "      <td>118300_123472</td>\n",
       "      <td>118300_117906</td>\n",
       "      <td>118300_290919</td>\n",
       "      <td>118300_117908</td>\n",
       "      <td>123472_117906</td>\n",
       "      <td>123472_290919</td>\n",
       "      <td>123472_117908</td>\n",
       "      <td>117906_290919</td>\n",
       "      <td>117906_117908</td>\n",
       "      <td>290919_117908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17183</td>\n",
       "      <td>1540</td>\n",
       "      <td>117961</td>\n",
       "      <td>118343</td>\n",
       "      <td>123125</td>\n",
       "      <td>118536</td>\n",
       "      <td>308574</td>\n",
       "      <td>118539</td>\n",
       "      <td>17183_1540</td>\n",
       "      <td>17183_117961</td>\n",
       "      <td>...</td>\n",
       "      <td>118343_123125</td>\n",
       "      <td>118343_118536</td>\n",
       "      <td>118343_308574</td>\n",
       "      <td>118343_118539</td>\n",
       "      <td>123125_118536</td>\n",
       "      <td>123125_308574</td>\n",
       "      <td>123125_118539</td>\n",
       "      <td>118536_308574</td>\n",
       "      <td>118536_118539</td>\n",
       "      <td>308574_118539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>36724</td>\n",
       "      <td>14457</td>\n",
       "      <td>118219</td>\n",
       "      <td>118220</td>\n",
       "      <td>117884</td>\n",
       "      <td>267952</td>\n",
       "      <td>19721</td>\n",
       "      <td>117880</td>\n",
       "      <td>36724_14457</td>\n",
       "      <td>36724_118219</td>\n",
       "      <td>...</td>\n",
       "      <td>118220_117884</td>\n",
       "      <td>118220_267952</td>\n",
       "      <td>118220_19721</td>\n",
       "      <td>118220_117880</td>\n",
       "      <td>117884_267952</td>\n",
       "      <td>117884_19721</td>\n",
       "      <td>117884_117880</td>\n",
       "      <td>267952_19721</td>\n",
       "      <td>267952_117880</td>\n",
       "      <td>19721_117880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36135</td>\n",
       "      <td>5396</td>\n",
       "      <td>117961</td>\n",
       "      <td>118343</td>\n",
       "      <td>119993</td>\n",
       "      <td>240983</td>\n",
       "      <td>290919</td>\n",
       "      <td>118322</td>\n",
       "      <td>36135_5396</td>\n",
       "      <td>36135_117961</td>\n",
       "      <td>...</td>\n",
       "      <td>118343_119993</td>\n",
       "      <td>118343_240983</td>\n",
       "      <td>118343_290919</td>\n",
       "      <td>118343_118322</td>\n",
       "      <td>119993_240983</td>\n",
       "      <td>119993_290919</td>\n",
       "      <td>119993_118322</td>\n",
       "      <td>240983_290919</td>\n",
       "      <td>240983_118322</td>\n",
       "      <td>290919_118322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42680</td>\n",
       "      <td>5905</td>\n",
       "      <td>117929</td>\n",
       "      <td>117930</td>\n",
       "      <td>119569</td>\n",
       "      <td>123932</td>\n",
       "      <td>19793</td>\n",
       "      <td>119325</td>\n",
       "      <td>42680_5905</td>\n",
       "      <td>42680_117929</td>\n",
       "      <td>...</td>\n",
       "      <td>117930_119569</td>\n",
       "      <td>117930_123932</td>\n",
       "      <td>117930_19793</td>\n",
       "      <td>117930_119325</td>\n",
       "      <td>119569_123932</td>\n",
       "      <td>119569_19793</td>\n",
       "      <td>119569_119325</td>\n",
       "      <td>123932_19793</td>\n",
       "      <td>123932_119325</td>\n",
       "      <td>19793_119325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_FAMILY_DESC  \\\n",
       "0    39353  85475        117961        118300        123472           117906   \n",
       "1    17183   1540        117961        118343        123125           118536   \n",
       "2    36724  14457        118219        118220        117884           267952   \n",
       "3    36135   5396        117961        118343        119993           240983   \n",
       "4    42680   5905        117929        117930        119569           123932   \n",
       "\n",
       "  ROLE_FAMILY ROLE_CODE RESOURCE_MGR_ID RESOURCE_ROLE_ROLLUP_1  ...  \\\n",
       "0      290919    117908     39353_85475           39353_117961  ...   \n",
       "1      308574    118539      17183_1540           17183_117961  ...   \n",
       "2       19721    117880     36724_14457           36724_118219  ...   \n",
       "3      290919    118322      36135_5396           36135_117961  ...   \n",
       "4       19793    119325      42680_5905           42680_117929  ...   \n",
       "\n",
       "  ROLE_ROLLUP_2_ROLE_DEPTNAME ROLE_ROLLUP_2_ROLE_FAMILY_DESC  \\\n",
       "0               118300_123472                  118300_117906   \n",
       "1               118343_123125                  118343_118536   \n",
       "2               118220_117884                  118220_267952   \n",
       "3               118343_119993                  118343_240983   \n",
       "4               117930_119569                  117930_123932   \n",
       "\n",
       "  ROLE_ROLLUP_2_ROLE_FAMILY ROLE_ROLLUP_2_ROLE_CODE  \\\n",
       "0             118300_290919           118300_117908   \n",
       "1             118343_308574           118343_118539   \n",
       "2              118220_19721           118220_117880   \n",
       "3             118343_290919           118343_118322   \n",
       "4              117930_19793           117930_119325   \n",
       "\n",
       "  ROLE_DEPTNAME_ROLE_FAMILY_DESC ROLE_DEPTNAME_ROLE_FAMILY  \\\n",
       "0                  123472_117906             123472_290919   \n",
       "1                  123125_118536             123125_308574   \n",
       "2                  117884_267952              117884_19721   \n",
       "3                  119993_240983             119993_290919   \n",
       "4                  119569_123932              119569_19793   \n",
       "\n",
       "  ROLE_DEPTNAME_ROLE_CODE ROLE_FAMILY_DESC_ROLE_FAMILY  \\\n",
       "0           123472_117908                117906_290919   \n",
       "1           123125_118539                118536_308574   \n",
       "2           117884_117880                 267952_19721   \n",
       "3           119993_118322                240983_290919   \n",
       "4           119569_119325                 123932_19793   \n",
       "\n",
       "  ROLE_FAMILY_DESC_ROLE_CODE ROLE_FAMILY_ROLE_CODE  \n",
       "0              117906_117908         290919_117908  \n",
       "1              118536_118539         308574_118539  \n",
       "2              267952_117880          19721_117880  \n",
       "3              240983_118322         290919_118322  \n",
       "4              123932_119325          19793_119325  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(train[new_col4train].shape, test[new_col4train].shape)\n",
    "train[new_col4train].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RESOURCE                           7518\n",
       "MGR_ID                             4243\n",
       "ROLE_ROLLUP_1                       128\n",
       "ROLE_ROLLUP_2                       177\n",
       "ROLE_DEPTNAME                       449\n",
       "ROLE_FAMILY_DESC                   2358\n",
       "ROLE_FAMILY                          67\n",
       "ROLE_CODE                           343\n",
       "RESOURCE_MGR_ID                   27626\n",
       "RESOURCE_ROLE_ROLLUP_1            11091\n",
       "RESOURCE_ROLE_ROLLUP_2            13422\n",
       "RESOURCE_ROLE_DEPTNAME            17354\n",
       "RESOURCE_ROLE_FAMILY_DESC         22734\n",
       "RESOURCE_ROLE_FAMILY              13195\n",
       "RESOURCE_ROLE_CODE                19043\n",
       "MGR_ID_ROLE_ROLLUP_1               4461\n",
       "MGR_ID_ROLE_ROLLUP_2               4623\n",
       "MGR_ID_ROLE_DEPTNAME               5045\n",
       "MGR_ID_ROLE_FAMILY_DESC            7973\n",
       "MGR_ID_ROLE_FAMILY                 5483\n",
       "MGR_ID_ROLE_CODE                   7484\n",
       "ROLE_ROLLUP_1_ROLE_ROLLUP_2         187\n",
       "ROLE_ROLLUP_1_ROLE_DEPTNAME        1185\n",
       "ROLE_ROLLUP_1_ROLE_FAMILY_DESC     3282\n",
       "ROLE_ROLLUP_1_ROLE_FAMILY           750\n",
       "ROLE_ROLLUP_1_ROLE_CODE            1506\n",
       "ROLE_ROLLUP_2_ROLE_DEPTNAME        1398\n",
       "ROLE_ROLLUP_2_ROLE_FAMILY_DESC     3949\n",
       "ROLE_ROLLUP_2_ROLE_FAMILY          1045\n",
       "ROLE_ROLLUP_2_ROLE_CODE            2125\n",
       "ROLE_DEPTNAME_ROLE_FAMILY_DESC     4553\n",
       "ROLE_DEPTNAME_ROLE_FAMILY          1613\n",
       "ROLE_DEPTNAME_ROLE_CODE            2946\n",
       "ROLE_FAMILY_DESC_ROLE_FAMILY       2586\n",
       "ROLE_FAMILY_DESC_ROLE_CODE         3013\n",
       "ROLE_FAMILY_ROLE_CODE               343\n",
       "dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[new_col4train].apply(lambda x: len(x.unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scores = []\n",
    "tr_scores = []\n",
    "for train_index, test_index in skf.split(train, y):\n",
    "    train_df = train.loc[train_index,new_col4train].reset_index(drop = True)\n",
    "    valid_df = train.loc[test_index,new_col4train].reset_index(drop = True)\n",
    "    train_y, valid_y = y[train_index], y[test_index]\n",
    "    te = TargetEncodingExpandingMean(columns_names=new_col4train)\n",
    "\n",
    "    X_tr = te.fit_transform(train_df, train_y)\n",
    "    X_val = te.transform(valid_df)\n",
    "    \n",
    "    te2 = TargetEncodingSmoothing(\n",
    "        columns_names= new_col4train,\n",
    "        k = 3, f = 1.5,\n",
    "    )\n",
    "    \n",
    "    X_tr2 = get_CV_target_encoding(train_df, train_y, te2, cv = 5)\n",
    "    te2.fit(train_df, train_y)\n",
    "    X_val2 = te2.transform(valid_df)\n",
    "    \n",
    "    X_tr = pd.concat([X_tr, X_tr2], axis = 1)\n",
    "    X_val = pd.concat([X_val, X_val2], axis = 1)\n",
    "\n",
    "    model = get_model()\n",
    "    model.fit(X_tr,train_y)\n",
    "\n",
    "    predictions = model.predict_proba(X_val)[:,1]\n",
    "    scores.append(roc_auc_score(valid_y, predictions))\n",
    "\n",
    "    train_preds = model.predict_proba(X_tr)[:,1]\n",
    "    tr_scores.append(roc_auc_score(train_y, train_preds))\n",
    "\n",
    "print(\"Train AUC score: {:.4f} Valid AUC score: {:.4f}, STD: {:.4f}\".format(\n",
    "    np.mean(tr_scores), np.mean(scores), np.std(scores)\n",
    "))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "te = TargetEncodingExpandingMean(columns_names=new_col4train)\n",
    "\n",
    "X_tr = te.fit_transform(train[new_col4train], y)\n",
    "X_val = te.transform(test[new_col4train])\n",
    "\n",
    "te2 = TargetEncodingSmoothing(\n",
    "    columns_names= new_col4train,\n",
    "    k = 3, f = 1.5,\n",
    ")\n",
    "\n",
    "X_tr2 = get_CV_target_encoding(train[new_col4train], y, te2, cv = 5)\n",
    "te2.fit(train[new_col4train], y)\n",
    "X_val2 = te2.transform(test[new_col4train])\n",
    "\n",
    "X = pd.concat([X_tr, X_tr2], axis = 1)\n",
    "X_te = pd.concat([X_val, X_val2], axis = 1)\n",
    "\n",
    "model = get_model()\n",
    "model.fit(X,y)\n",
    "predictions = model.predict_proba(X_te)[:,1]\n",
    "\n",
    "submit = pd.DataFrame()\n",
    "submit[\"Id\"] = test[\"id\"]\n",
    "submit[\"ACTION\"] = predictions\n",
    "\n",
    "submit.to_csv(\"submission.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
